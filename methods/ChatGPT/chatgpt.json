[
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? \n SELECT"
            }
        ],
        "output": [
            "visitor.Name \nFROM visitor \nINNER JOIN visit ON visitor.ID = visit.visitor_ID \nINNER JOIN museum ON visit.Museum_ID = museum.Museum_ID \nWHERE museum.Open_Year < 2009 AND museum.Open_Year > 2011"
        ],
        "prompt_tokens": 111,
        "completion_tokens": 54,
        "total_tokens": 165
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. \n SELECT"
            }
        ],
        "output": [
            "TV_Channel.series_name \nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Title = 'The Rise of the Blue Beetle!';"
        ],
        "prompt_tokens": 150,
        "completion_tokens": 37,
        "total_tokens": 187
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the title of all cartoons in alphabetical order. \n SELECT"
            }
        ],
        "output": [
            "Title \nFROM Cartoon \nORDER BY Title ASC;"
        ],
        "prompt_tokens": 134,
        "completion_tokens": 14,
        "total_tokens": 148
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced by each maker ? Only list the count and the maker full name . \n SELECT"
            }
        ],
        "output": [
            "car_makers.FullName, COUNT(model_list.ModelId) AS ModelCount\nFROM car_makers\nJOIN model_list ON car_makers.Maker = model_list.Maker\nGROUP BY car_makers.Id;"
        ],
        "prompt_tokens": 140,
        "completion_tokens": 46,
        "total_tokens": 186
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which employee received the most awards in evaluations? Give me the employee name. \n SELECT"
            }
        ],
        "output": [
            "Name\nFROM employee\nWHERE Employee_ID IN (\n    SELECT Employee_ID\n    FROM evaluation\n    GROUP BY Employee_ID\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
        ],
        "prompt_tokens": 110,
        "completion_tokens": 42,
        "total_tokens": 152
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names of players who won in both 2013 and 2016? \n SELECT"
            }
        ],
        "output": [
            "players.first_name, players.last_name \nFROM players \nJOIN matches ON players.player_id = matches.winner_id \nWHERE strftime('%Y', tourney_date) = '2013' AND players.player_id IN \n(SELECT winner_id FROM matches WHERE strftime('%Y', tourney_date) = '2016') \nGROUP BY players.player_id \nHAVING COUNT(DISTINCT strftime('%Y', tourney_date)) = 2;"
        ],
        "prompt_tokens": 187,
        "completion_tokens": 91,
        "total_tokens": 278
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of carsw ith over 6 cylinders? \n SELECT"
            }
        ],
        "output": [
            "COUNT(*) FROM cars_data WHERE Cylinders > 6;"
        ],
        "prompt_tokens": 133,
        "completion_tokens": 17,
        "total_tokens": 150
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average, minimum, and maximum age of all singers from France? \n SELECT"
            }
        ],
        "output": [
            "AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'"
        ],
        "prompt_tokens": 127,
        "completion_tokens": 25,
        "total_tokens": 152
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### How many people are there of each nationality? \n SELECT"
            }
        ],
        "output": [
            "Nationality, COUNT(People_ID) \n FROM people \n GROUP BY Nationality;"
        ],
        "prompt_tokens": 89,
        "completion_tokens": 22,
        "total_tokens": 111
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the last transcript release date? \n SELECT"
            }
        ],
        "output": [
            "MAX(transcript_date) FROM Transcripts;"
        ],
        "prompt_tokens": 279,
        "completion_tokens": 13,
        "total_tokens": 292
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the countries that have cartoons on TV that were written by Todd Casey? \n SELECT"
            }
        ],
        "output": [
            "TV_Channel.Country \nFROM TV_Channel \nINNER JOIN Cartoon \nON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Todd Casey'"
        ],
        "prompt_tokens": 140,
        "completion_tokens": 34,
        "total_tokens": 174
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the official language spoken in the country whose head of state is Beatrix? \n SELECT"
            }
        ],
        "output": [
            "countrylanguage.Language\nFROM countrylanguage\nINNER JOIN country ON countrylanguage.CountryCode = country.Code\nWHERE country.HeadOfState = 'Beatrix'\nAND countrylanguage.IsOfficial = 'T'"
        ],
        "prompt_tokens": 137,
        "completion_tokens": 43,
        "total_tokens": 180
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the number of nations that use English and Dutch? \n SELECT"
            }
        ],
        "output": [
            "COUNT(DISTINCT CountryCode) FROM countrylanguage \nWHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T'"
        ],
        "prompt_tokens": 132,
        "completion_tokens": 32,
        "total_tokens": 164
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which states have both owners and professionals living there? \n SELECT"
            }
        ],
        "output": [
            "state\nFROM Owners\nWHERE state IN (\n  SELECT state\n  FROM Professionals\n)"
        ],
        "prompt_tokens": 217,
        "completion_tokens": 22,
        "total_tokens": 239
    },
    {
        "input": [
            {
                "role": "user",
                "content": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the id of the semester that had both Masters and Bachelors students enrolled? \n SELECT"
            }
        ],
        "output": [
            "Semesters.semester_id \nFROM Semesters \nINNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_summary_name IN ('Masters','Bachelors') \nGROUP BY Semesters.semester_id \nHAVING COUNT(DISTINCT Student_Enrolment.student_id) > 1;"
        ],
        "prompt_tokens": 289,
        "completion_tokens": 102,
        "total_tokens": 391
    }
]