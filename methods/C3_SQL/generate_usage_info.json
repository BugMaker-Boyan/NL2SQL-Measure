[
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visit ( museum_id, visitor_id, num_of_ticket, total_spent )\n# museum ( name, museum_id, open_year, num_of_staff )\n# visitor ( name, id, level_of_membership, age )\n# visit.visitor_id = visitor.id\n# visit.museum_id = museum.museum_id\n#\n### What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?\nSELECT",
    "output": [
      "visitor.name FROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE visit.museum_id IN (SELECT museum_id FROM museum WHERE open_year < 2009) \nINTERSECT \nSELECT visitor.name FROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE visit.museum_id IN (SELECT museum_id FROM museum WHERE open_year > 2011);",
      "visitor.name FROM visitor\nWHERE visitor.id IN \n   (SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id\n   WHERE museum.open_year < 2009\n   INTERSECT\n   SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id\n   WHERE museum.open_year > 2011);\n",
      "visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE visit.museum_id IN \n    (SELECT museum_id FROM museum WHERE open_year < 2009) \nINTERSECT \nSELECT visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE visit.museum_id IN \n    (SELECT museum_id FROM museum WHERE open_year > 2011);",
      "visitor.name FROM visitor \nJOIN visit ON visit.visitor_id = visitor.id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year < 2009 \nINTERSECT \nSELECT visitor.name FROM visitor \nJOIN visit ON visit.visitor_id = visitor.id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year > 2011;",
      "visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year < 2009 \nINTERSECT \nSELECT visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year > 2011;",
      "visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year < 2009 \nINTERSECT \nSELECT visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year > 2011;",
      "visitor.name \nFROM visit\nJOIN museum ON visit.museum_id = museum.museum_id\nJOIN visitor ON visit.visitor_id = visitor.id\nWHERE museum.open_year < 2009\nINTERSECT\nSELECT visitor.name \nFROM visit\nJOIN museum ON visit.museum_id = museum.museum_id\nJOIN visitor ON visit.visitor_id = visitor.id\nWHERE museum.open_year > 2011;",
      "visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year < 2009 \nINTERSECT \nSELECT visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year > 2011;",
      "visitor.name \nFROM visit \nJOIN museum ON visit.museum_id = museum.museum_id \nJOIN visitor ON visit.visitor_id = visitor.id \nWHERE visit.museum_id IN (SELECT museum_id FROM museum WHERE open_year < 2009)\nINTERSECT \nSELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE open_year > 2011;",
      "visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year < 2009 \nINTERSECT \nSELECT visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year > 2011;",
      "visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year < 2009 \nINTERSECT \nSELECT visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year > 2011;",
      "visitor.name \nFROM visitor \nINNER JOIN visit ON visitor.id = visit.visitor_id \nINNER JOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year < 2009 \nINTERSECT \nSELECT visitor.name \nFROM visitor \nINNER JOIN visit ON visitor.id = visit.visitor_id \nINNER JOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year > 2011;",
      "visitor.name \nFROM visitor \nJOIN visit ON visit.visitor_id = visitor.id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year < 2009 \nINTERSECT \nSELECT visitor.name \nFROM visitor \nJOIN visit ON visit.visitor_id = visitor.id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year > 2011;",
      "visitor.name\nFROM visitor\nJOIN visit ON visitor.id = visit.visitor_id\nJOIN museum ON visit.museum_id = museum.museum_id\nWHERE museum.open_year < 2009\nINTERSECT\nSELECT visitor.name\nFROM visitor\nJOIN visit ON visitor.id = visit.visitor_id\nJOIN museum ON visit.museum_id = museum.museum_id\nWHERE museum.open_year > 2011;",
      "visitor.name FROM visitor\nWHERE visitor_id IN\n(SELECT visitor_id FROM visit\nWHERE museum_id IN\n(SELECT museum_id FROM museum\nWHERE open_year < 2009)\nINTERSECT\nSELECT visitor_id FROM visit\nWHERE museum_id IN\n(SELECT museum_id FROM museum\nWHERE open_year > 2011));",
      "visitor.name FROM visitor \nWHERE visitor.id IN (SELECT visit.visitor_id FROM visit \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year < 2009 \nINTERSECT \nSELECT visit.visitor_id FROM visit \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year > 2011);",
      "visitor.name FROM visitor\nWHERE visitor_id IN \n    (SELECT visitor_id FROM visit\n    JOIN museum ON visit.museum_id = museum.museum_id\n    WHERE open_year < 2009 AND open_year > 2011)",
      "visitor.name FROM visitor \nWHERE visitor.id IN \n  (SELECT visit.visitor_id FROM visit \n    JOIN museum ON visit.museum_id = museum.museum_id \n    WHERE museum.open_year < 2009 \n    INTERSECT \n    SELECT visit.visitor_id FROM visit \n    JOIN museum ON visit.museum_id = museum.museum_id \n    WHERE museum.open_year > 2011);",
      "visitor.name \nFROM visitor \nINNER JOIN visit ON visitor.id = visit.visitor_id \nINNER JOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year < 2009 \nINTERSECT \nSELECT visitor.name \nFROM visitor \nINNER JOIN visit ON visitor.id = visit.visitor_id \nINNER JOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year > 2011;",
      "visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year < 2009 \nINTERSECT \nSELECT visitor.name \nFROM visitor \nJOIN visit ON visitor.id = visit.visitor_id \nJOIN museum ON visit.museum_id = museum.museum_id \nWHERE museum.open_year > 2011;"
    ],
    "prompt_tokens": 519,
    "completion_tokens": 1637,
    "total_tokens": 2156
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tv_channel ( id, series_name, country, language )\n# cartoon ( title(\"The Rise of the Blue Beetle!\"), channel, directed_by, written_by, id )\n# tv_series ( episode, air_date, channel, rating, id )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n#\n### What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.\nSELECT",
    "output": [
      "series_name\nFROM tv_channel\nWHERE id = (SELECT channel FROM cartoon WHERE title = \"The Rise of the Blue Beetle!\");",
      "series_name \nFROM tv_channel \nWHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!');",
      "series_name \nFROM tv_channel \nWHERE id = (\n    SELECT channel \n    FROM cartoon \n    WHERE title = 'The Rise of the Blue Beetle!'\n);",
      "series_name\nFROM tv_channel\nJOIN cartoon ON tv_channel.id = cartoon.channel\nWHERE cartoon.title = 'The Rise of the Blue Beetle!';",
      "series_name \nFROM tv_channel \nWHERE id IN \n    (SELECT channel \n     FROM cartoon \n     WHERE title = 'The Rise of the Blue Beetle!');",
      "series_name \nFROM tv_channel \nWHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!');",
      "series_name\nFROM tv_channel\nWHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!');",
      "series_name \nFROM tv_channel \nWHERE id = (SELECT channel FROM cartoon WHERE title = \"The Rise of the Blue Beetle!\");",
      "tv_channel.series_name\nFROM tv_channel\nJOIN cartoon ON tv_channel.id = cartoon.channel\nWHERE cartoon.title = 'The Rise of the Blue Beetle!';",
      "tv_channel.series_name \nFROM tv_channel \nJOIN cartoon ON tv_channel.id = cartoon.channel \nWHERE cartoon.title = 'The Rise of the Blue Beetle!';",
      "series_name\nFROM tv_channel\nWHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!');",
      "series_name\nFROM tv_channel\nWHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!');",
      "series_name \nFROM tv_channel \nWHERE id = (SELECT channel FROM cartoon WHERE title = \"The Rise of the Blue Beetle!\");",
      "series_name \nFROM tv_channel \nWHERE id = (SELECT channel FROM cartoon WHERE title = \"The Rise of the Blue Beetle!\");",
      "series_name \nFROM tv_channel\nWHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!');",
      "series_name\nFROM tv_channel\nWHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!');",
      "tv_channel.series_name\nFROM tv_channel\nINNER JOIN cartoon ON tv_channel.id = cartoon.channel\nWHERE cartoon.title = \"The Rise of the Blue Beetle!\";",
      "series_name \nFROM tv_channel \nWHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!');",
      "tv_channel.series_name \nFROM tv_channel \nJOIN cartoon ON tv_channel.id = cartoon.channel \nWHERE cartoon.title = 'The Rise of the Blue Beetle!';",
      "series_name \nFROM tv_channel \nWHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!');"
    ],
    "prompt_tokens": 522,
    "completion_tokens": 571,
    "total_tokens": 1093
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cartoon ( title, channel, directed_by, written_by, id )\n# tv_channel ( id, series_name, country, language )\n# tv_series ( episode, air_date, rating, channel, share )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n#\n### List the title of all cartoons in alphabetical order.\nSELECT",
    "output": [
      "title FROM cartoon ORDER BY title ASC;",
      "title \nFROM cartoon \nORDER BY title ASC;",
      "title FROM cartoon ORDER BY title;",
      "title FROM cartoon ORDER BY title;",
      "title FROM cartoon ORDER BY title;",
      "title \nFROM cartoon \nORDER BY title ASC;",
      "title FROM cartoon ORDER BY title;",
      "title FROM cartoon ORDER BY title ASC;",
      "title FROM cartoon ORDER BY title ASC;",
      "title \nFROM cartoon \nORDER BY title ASC;",
      "title FROM cartoon ORDER BY title;",
      "title FROM cartoon ORDER BY title;",
      "title \nFROM cartoon \nORDER BY title ASC;",
      "title FROM cartoon ORDER BY title ASC;",
      "title \nFROM cartoon \nORDER BY title ASC;",
      "title FROM cartoon ORDER BY title;",
      "title FROM cartoon ORDER BY title;",
      "title FROM cartoon ORDER BY title;",
      "title FROM cartoon ORDER BY title;",
      "title FROM cartoon ORDER BY title ASC;"
    ],
    "prompt_tokens": 498,
    "completion_tokens": 160,
    "total_tokens": 658
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# car_makers ( fullname, id, maker, country )\n# model_list ( maker, modelid, model )\n# car_names ( model, makeid, make )\n# countries ( countryid, countryname, continent )\n# car_makers.country = countries.countryid\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n#\n### How many car models are produced by each maker ? Only list the count and the maker full name .\nSELECT",
    "output": [
      "car_makers.fullname, COUNT(model_list.modelid) AS model_count \nFROM car_makers\nINNER JOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.model) AS model_count\nFROM car_makers\nJOIN model_list ON model_list.maker = car_makers.id\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.model) AS model_count\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.modelid)\nFROM car_makers\nINNER JOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.modelid)\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.model)\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.modelid) as total_models\nFROM car_makers\nINNER JOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.modelid) as model_count\nFROM car_makers \nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.modelid) as num_car_models\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, count(model_list.modelid)\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.modelid) AS model_count\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.modelid)\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.modelid) as total_models \nFROM car_makers \nJOIN model_list ON car_makers.id = model_list.maker \nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.model) AS model_count\nFROM car_makers\nINNER JOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.modelid) as total_models\nFROM car_makers\nJOIN model_list ON model_list.maker = car_makers.id\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.modelid) AS count_models\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname",
      "car_makers.fullname, COUNT(model_list.modelid) AS total_models \nFROM car_makers \nINNER JOIN model_list ON car_makers.id = model_list.maker \nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.model) AS model_count\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.model) as model_count\nFROM car_makers\nJOIN model_list ON car_makers.id = model_list.maker\nGROUP BY car_makers.fullname;",
      "car_makers.fullname, COUNT(model_list.model) AS model_count\nFROM car_makers\nJOIN model_list ON model_list.maker = car_makers.id\nGROUP BY car_makers.fullname;"
    ],
    "prompt_tokens": 524,
    "completion_tokens": 838,
    "total_tokens": 1362
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# evaluation ( employee_id, year_awarded, bonus )\n# employee ( employee_id, name, age, city )\n# hiring ( employee_id, shop_id, start_from, is_full_time )\n# shop ( shop_id, name, location, district )\n# hiring.employee_id = employee.employee_id\n# hiring.shop_id = shop.shop_id\n# evaluation.employee_id = employee.employee_id\n#\n### Which employee received the most awards in evaluations? Give me the employee name.\nSELECT",
    "output": [
      "employee.name\nFROM employee\nJOIN evaluation ON employee.employee_id = evaluation.employee_id\nGROUP BY employee.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "employee.name\nFROM employee\nJOIN evaluation ON employee.employee_id = evaluation.employee_id\nGROUP BY employee.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "employee.name \nFROM employee \nJOIN evaluation ON employee.employee_id = evaluation.employee_id \nGROUP BY employee.name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
      "employee.name \nFROM employee \nJOIN evaluation ON employee.employee_id = evaluation.employee_id \nGROUP BY employee.name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
      "employee.name\nFROM employee\nJOIN evaluation ON employee.employee_id = evaluation.employee_id\nGROUP BY employee.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "employee.name\nFROM employee\nJOIN evaluation ON employee.employee_id = evaluation.employee_id\nGROUP BY employee.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "employee.name\nFROM employee\nJOIN evaluation ON employee.employee_id = evaluation.employee_id\nGROUP BY employee.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "employee.name\nFROM evaluation\nJOIN employee ON evaluation.employee_id = employee.employee_id\nGROUP BY evaluation.employee_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "employee.name\nFROM employee\nJOIN evaluation ON employee.employee_id = evaluation.employee_id\nGROUP BY employee.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "employee.name\nFROM employee\nJOIN evaluation ON employee.employee_id = evaluation.employee_id\nGROUP BY employee.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "employee.name \nFROM employee \nJOIN evaluation ON employee.employee_id = evaluation.employee_id \nGROUP BY employee.name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
      "employee.name\nFROM employee\nJOIN evaluation ON employee.employee_id = evaluation.employee_id\nGROUP BY employee.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "employee.name\nFROM employee\nJOIN evaluation ON employee.employee_id = evaluation.employee_id\nGROUP BY employee.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "MAX(name) FROM (SELECT name, COUNT(year_awarded) AS num_awards \nFROM employee \nJOIN evaluation ON employee.employee_id = evaluation.employee_id \nGROUP BY name \nORDER BY num_awards DESC \nLIMIT 1);",
      "employee.name\nFROM employee\nJOIN evaluation ON employee.employee_id = evaluation.employee_id\nGROUP BY employee.name\nORDER BY count(*) DESC\nLIMIT 1;",
      "employee.name\nFROM employee\nJOIN evaluation ON employee.employee_id = evaluation.employee_id\nGROUP BY employee.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "employee.name \nFROM employee \nJOIN evaluation ON employee.employee_id = evaluation.employee_id \nGROUP BY employee.name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
      "```sql\nSELECT e.name\nFROM employee e\nJOIN evaluation ev ON e.employee_id = ev.employee_id\nGROUP BY e.employee_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n```",
      "```sql\nSELECT name \nFROM employee \nWHERE employee_id = (SELECT employee_id \n                     FROM evaluation \n                     GROUP BY employee_id \n                     ORDER BY COUNT(*) DESC \n                     LIMIT 1);\n```",
      "employee.name \nFROM employee \nJOIN evaluation ON employee.employee_id = evaluation.employee_id \nGROUP BY employee.name \nORDER BY COUNT(*) DESC \nLIMIT 1;"
    ],
    "prompt_tokens": 522,
    "completion_tokens": 673,
    "total_tokens": 1195
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( winner_id, year, winner_name, match_num, tourney_date, loser_id )\n# players ( first_name, last_name, player_id, hand )\n# rankings ( player_id, ranking_date, ranking, ranking_points )\n# matches.winner_id = players.player_id\n# matches.loser_id = players.player_id\n# rankings.player_id = players.player_id\n#\n### What are the names of players who won in both 2013 and 2016?\nSELECT",
    "output": [
      "players.first_name, players.last_name\nFROM players\nJOIN matches ON matches.winner_id = players.player_id\nWHERE matches.year = 2013\nINTERSECT\nSELECT players.first_name, players.last_name\nFROM players\nJOIN matches ON matches.winner_id = players.player_id\nWHERE matches.year = 2016;",
      "players.first_name, players.last_name \nFROM \n  players \n  JOIN matches ON matches.winner_id = players.player_id \nWHERE \n  matches.year = 2013 \n  AND players.player_id IN \n    ( \n      SELECT winner_id \n      FROM matches \n      WHERE year = 2016 \n    );",
      "players.first_name, players.last_name \nFROM matches \nJOIN players ON matches.winner_id = players.player_id \nWHERE year = 2013 \nINTERSECT \nSELECT players.first_name, players.last_name \nFROM matches \nJOIN players ON matches.winner_id = players.player_id \nWHERE year = 2016;",
      "players.first_name, players.last_name FROM players\nWHERE players.player_id IN \n  (SELECT winner_id FROM matches WHERE year = 2013)\nINTERSECT\nSELECT winner_id FROM matches WHERE year = 2016;",
      "players.first_name, players.last_name\nFROM matches\nJOIN players ON matches.winner_id = players.player_id\nWHERE matches.year = 2013\nINTERSECT\nSELECT players.first_name, players.last_name\nFROM matches\nJOIN players ON matches.winner_id = players.player_id\nWHERE matches.year = 2016;",
      "players.first_name, players.last_name\nFROM matches\nINNER JOIN players ON matches.winner_id = players.player_id\nWHERE year = 2013\n\nINTERSECT \n\nSELECT players.first_name, players.last_name\nFROM matches\nINNER JOIN players ON matches.winner_id = players.player_id\nWHERE year = 2016;",
      "\n```sql\nSELECT winner_name \nFROM matches \nWHERE year = 2013 \nAND winner_name IN \n    (SELECT winner_name \n     FROM matches \n     WHERE year = 2016)\n```\n",
      "players.first_name, players.last_name\nFROM matches\nJOIN players ON matches.winner_id = players.player_id\nWHERE year = 2013\nINTERSECT\nSELECT players.first_name, players.last_name\nFROM matches\nJOIN players ON matches.winner_id = players.player_id\nWHERE year = 2016;",
      "players.first_name, players.last_name \nFROM \n    players \n    JOIN matches ON matches.winner_id = players.player_id \nWHERE \n    matches.year = 2013 \n\nINTERSECT \n\nSELECT \n    players.first_name, players.last_name \nFROM \n    players \n    JOIN matches ON matches.winner_id = players.player_id \nWHERE \n    matches.year = 2016;",
      "players.first_name, players.last_name\nFROM matches\nJOIN players ON matches.winner_id = players.player_id\nWHERE year = 2013\nINTERSECT\nSELECT players.first_name, players.last_name\nFROM matches\nJOIN players ON matches.winner_id = players.player_id\nWHERE year = 2016;",
      "player_name\nFROM\n(SELECT winner_name AS player_name, year\nFROM matches\nWHERE year = 2013\nINTERSECT\nSELECT winner_name AS player_name, year\nFROM matches\nWHERE year = 2016);",
      "players.first_name, players.last_name\nFROM players\nINNER JOIN matches ON matches.winner_id = players.player_id\nWHERE matches.year = 2013\nINTERSECT\nSELECT players.first_name, players.last_name\nFROM players\nINNER JOIN matches ON matches.winner_id = players.player_id\nWHERE matches.year = 2016;",
      "first_name, last_name \nFROM players \nWHERE player_id IN \n    (SELECT winner_id \n     FROM matches \n     WHERE year = 2013) \nINTERSECT \nSELECT first_name, last_name \nFROM players \nWHERE player_id IN \n    (SELECT winner_id \n     FROM matches \n     WHERE year = 2016);",
      "players.first_name, players.last_name\nFROM players\nINNER JOIN matches ON matches.winner_id = players.player_id\nWHERE matches.year = 2013\n\nINTERSECT\n\nSELECT players.first_name, players.last_name\nFROM players\nINNER JOIN matches ON matches.winner_id = players.player_id\nWHERE matches.year = 2016;",
      "player_id \nFROM matches \nWHERE year = 2013 \nAND player_id IN \n(\n    SELECT player_id \n    FROM matches \n    WHERE year = 2016 \n    AND winner_id = player_id\n);",
      "player_name \nFROM players \nWHERE player_id IN (\n    SELECT winner_id \n    FROM matches \n    WHERE year = 2013 \n    INTERSECT \n    SELECT winner_id \n    FROM matches \n    WHERE year = 2016\n);",
      "I recall the tip about using \"INTERSECT\" to find records that match across two tables. Here's the SQL query that follows the given guidelines:\n\n```sql\nSELECT winner_name \nFROM matches \nWHERE year = 2013 \nINTERSECT \nSELECT winner_name \nFROM matches \nWHERE year = 2016;\n```",
      "```sql\nSELECT first_name, last_name \nFROM players \nWHERE player_id IN \n    (SELECT winner_id \n     FROM matches \n     WHERE year = 2013 \n     INTERSECT \n     SELECT winner_id \n     FROM matches \n     WHERE year = 2016);\n```",
      "players.first_name, players.last_name \nFROM players \nINNER JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.year = 2013 \nINNER JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.year = 2016;",
      "players.first_name, players.last_name \nFROM matches \nJOIN players ON matches.winner_id = players.player_id \nWHERE year = 2013 \nINTERSECT \nSELECT players.first_name, players.last_name \nFROM matches \nJOIN players ON matches.winner_id = players.player_id \nWHERE year = 2016;"
    ],
    "prompt_tokens": 524,
    "completion_tokens": 1232,
    "total_tokens": 1756
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cars_data ( cylinders, id, mpg, edispl )\n# car_makers ( id, maker, fullname, country )\n# model_list ( maker, modelid, model )\n# car_names ( makeid, model, make )\n# model_list.maker = car_makers.id\n# car_names.model = model_list.model\n# cars_data.id = car_names.makeid\n#\n### What is the number of carsw ith over 6 cylinders?\nSELECT",
    "output": [
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "count(*) from cars_data where cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "count(*) \nFROM cars_data \nWHERE cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "count(*) \nFROM cars_data \nWHERE cylinders > 6;",
      "COUNT(id) FROM cars_data WHERE cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "COUNT(*) FROM cars_data WHERE cylinders > 6;",
      "count(*) FROM cars_data WHERE cylinders > 6;",
      "COUNT(*) \nFROM cars_data \nWHERE cylinders > 6;"
    ],
    "prompt_tokens": 520,
    "completion_tokens": 227,
    "total_tokens": 747
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( country(\"France\"), age, name, singer_id, is_male )\n# stadium ( location, name, capacity, highest, stadium_id )\n# concert ( stadium_id, theme, concert_name, concert_id, year )\n# singer_in_concert ( singer_id, concert_id )\n# concert.stadium_id = stadium.stadium_id\n# singer_in_concert.singer_id = singer.singer_id\n# singer_in_concert.concert_id = concert.concert_id\n#\n### What is the average, minimum, and maximum age of all singers from France?\nSELECT",
    "output": [
      "avg(age) as average_age, min(age) as min_age, max(age) as max_age\nFROM singer\nWHERE country = 'France';",
      "AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age\nFROM singer\nWHERE country = 'France';",
      "SELECT AVG(age) AS average_age, MIN(age) AS minimum_age, MAX(age) AS maximum_age \nFROM singer \nWHERE country = 'France';",
      "\n```sql\nSELECT AVG(age) AS avg_age, MIN(age) AS min_age, MAX(age) AS max_age \nFROM singer \nWHERE country = 'France';\n```",
      "SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age \nFROM singer \nWHERE country = 'France';",
      "```\nSELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';\n```",
      "AVG(age) as average_age, MIN(age) as min_age, MAX(age) as max_age \nFROM singer \nWHERE country = 'France';",
      "\nSELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age\nFROM singer\nWHERE country = 'France';",
      "AVG(age) AS average_age, \nMIN(age) AS min_age, \nMAX(age) AS max_age \nFROM singer \nWHERE country = 'France';",
      "AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age\nFROM singer\nWHERE country = 'France';",
      "AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age\nFROM singer\nWHERE country = 'France';",
      "AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age \nFROM singer \nWHERE country = 'France';",
      "average(age) AS avg_age, \nmin(age) AS min_age, \nmax(age) AS max_age \nFROM singer \nWHERE country = 'France';",
      "SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE country = 'France';",
      "AVG(age) as average_age, MIN(age) as min_age, MAX(age) as max_age\nFROM singer\nWHERE country = 'France';",
      "\nSELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age\nFROM singer\nWHERE country = 'France';",
      "AVG(age) AS average_age, \nMIN(age) AS min_age, \nMAX(age) AS max_age \nFROM singer \nWHERE country = 'France';",
      "AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age\nFROM singer\nWHERE country = 'France';",
      "AVG(age) AS average_age, \nMIN(age) AS minimum_age, \nMAX(age) AS maximum_age \nFROM singer \nWHERE country = 'France';",
      "AVG(age) as average_age, \nMIN(age) as min_age, \nMAX(age) as max_age \nFROM singer \nWHERE country = 'France';"
    ],
    "prompt_tokens": 542,
    "completion_tokens": 623,
    "total_tokens": 1165
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( nationality, name, birth_date, people_id, height )\n# poker_player ( final_table_made, best_finish, people_id, poker_player_id, money_rank )\n# poker_player.people_id = people.people_id\n#\n### How many people are there of each nationality?\nSELECT",
    "output": [
      "nationality, COUNT(*)\nFROM people\nGROUP BY nationality;",
      "nationality, COUNT(*) as count\nFROM people\nGROUP BY nationality;",
      "nationality, COUNT(people_id)\nFROM people\nGROUP BY nationality;",
      "nationality, count(*) as count\nFROM people\nGROUP BY nationality;",
      "nationality, COUNT(*) as count\nFROM people\nGROUP BY nationality;",
      "nationality, COUNT(*) as count\nFROM people\nGROUP BY nationality;",
      "nationality, COUNT(*) \nFROM people \nGROUP BY nationality;",
      "nationality, count(*) as count\nFROM people\nGROUP BY nationality;",
      "nationality, COUNT(people_id) as count\nFROM people\nGROUP BY nationality;",
      "nationality, count(*) as count\nFROM people\nGROUP BY nationality;",
      "nationality, count(*) AS count\nFROM people\nGROUP BY nationality;",
      "nationality, count(*) \nFROM people \nGROUP BY nationality;",
      "nationality, COUNT(*) as count\nFROM people\nGROUP BY nationality;",
      "nationality, COUNT(*) as people_count \nFROM people \nGROUP BY nationality;",
      "nationality, COUNT(people_id) AS count_people\nFROM people\nGROUP BY nationality;",
      "nationality, COUNT(people_id) as count\nFROM people\nGROUP BY nationality;",
      "nationality, COUNT(people_id) as count\nFROM people\nGROUP BY nationality;",
      "nationality, COUNT(*) as count\nFROM people\nGROUP BY nationality;",
      "nationality, COUNT(*) as count\nFROM people \nGROUP BY nationality;",
      "nationality, count(*) as count\nFROM people\nGROUP BY nationality;"
    ],
    "prompt_tokens": 484,
    "completion_tokens": 308,
    "total_tokens": 792
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transcripts ( transcript_date, transcript_id, other_details )\n# transcript_contents ( transcript_id, student_course_id )\n# students ( student_id, date_left, date_first_registered, current_address_id, permanent_address_id )\n# student_enrolment ( student_id, semester_id, degree_program_id, student_enrolment_id, other_details )\n# student_enrolment.student_id = students.student_id\n# transcript_contents.transcript_id = transcripts.transcript_id\n#\n### What is the last transcript release date?\nSELECT",
    "output": [
      "MAX(transcript_date) AS last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) AS last_transcript_release_date FROM transcripts;",
      "MAX(transcript_date) as last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) as last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) AS last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) AS last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) as last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) AS last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) as last_transcript_release_date FROM transcripts;",
      "MAX(transcript_date) AS last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) as last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) AS last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) AS last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) FROM transcripts;",
      "MAX(transcript_date) AS last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) AS last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) \nFROM transcripts;",
      "MAX(transcript_date) AS last_transcript_release_date FROM transcripts;",
      "MAX(transcript_date) AS last_transcript_release_date\nFROM transcripts;",
      "MAX(transcript_date) as last_transcript_release_date\nFROM transcripts;"
    ],
    "prompt_tokens": 529,
    "completion_tokens": 284,
    "total_tokens": 813
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cartoon ( written_by(\"Todd Casey\"), channel, title, original_air_date, id )\n# tv_channel ( id, series_name, country, language, content )\n# tv_series ( episode, air_date, channel, id, rating )\n# tv_series.channel = tv_channel.id\n# cartoon.channel = tv_channel.id\n#\n### What are the countries that have cartoons on TV that were written by Todd Casey?\nSELECT",
    "output": [
      "tv_channel.country \nFROM cartoon \nJOIN tv_channel ON cartoon.channel = tv_channel.id \nWHERE cartoon.written_by = 'Todd Casey';",
      "country \nFROM tv_channel \nWHERE id IN (\n    SELECT channel \n    FROM cartoon \n    WHERE written_by = 'Todd Casey'\n)",
      "tv_channel.country\nFROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = 'Todd Casey';",
      "tv_channel.country\nFROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = \"Todd Casey\";",
      "tv_channel.country\nFROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = \"Todd Casey\";",
      "country\nFROM tv_channel\nJOIN cartoon ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = \"Todd Casey\"",
      "tv_channel.country FROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = 'Todd Casey';",
      "tv_channel.country\nFROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = \"Todd Casey\";",
      "tv_channel.country\nFROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = 'Todd Casey';",
      "tv_channel.country\nFROM tv_channel\nJOIN cartoon ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = \"Todd Casey\";",
      "tv_channel.country\nFROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = 'Todd Casey';",
      "tv_channel.country\nFROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = 'Todd Casey';",
      "tv_channel.country\nFROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = \"Todd Casey\";",
      "tv_channel.country FROM tv_channel \nJOIN cartoon ON cartoon.channel = tv_channel.id \nWHERE cartoon.written_by = 'Todd Casey';",
      "tv_channel.country\nFROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = \"Todd Casey\";",
      "tv_channel.country\nFROM tv_channel\nINNER JOIN cartoon ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = 'Todd Casey';",
      "tv_channel.country\nFROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = 'Todd Casey';",
      "tv_channel.country\nFROM cartoon\nJOIN tv_channel ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = \"Todd Casey\";",
      "tv_channel.country \nFROM tv_channel \nJOIN cartoon ON cartoon.channel = tv_channel.id \nWHERE cartoon.written_by = \"Todd Casey\";",
      "country\nFROM tv_channel\nJOIN cartoon ON cartoon.channel = tv_channel.id\nWHERE cartoon.written_by = \"Todd Casey\";"
    ],
    "prompt_tokens": 510,
    "completion_tokens": 555,
    "total_tokens": 1065
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# countrylanguage ( language, countrycode, isofficial, percentage )\n# country ( code, name, headofstate(\"Beatrix\"), continent, region )\n# city ( countrycode, name, district, id, population )\n# sqlite_sequence ( name, seq )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n#\n### What is the official language spoken in the country whose head of state is Beatrix?\nSELECT",
    "output": [
      "language\nFROM countrylanguage\nWHERE countrycode IN \n(SELECT code\n FROM country\n WHERE headofstate = 'Beatrix')\nAND isofficial = 'T';",
      "language \nFROM countrylanguage \nWHERE countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix' )\nAND isofficial = 'T';",
      "language \nFROM countrylanguage \nWHERE isofficial = 'T' \nAND countrycode IN (SELECT code FROM country WHERE headofstate = 'Beatrix');",
      "language \nFROM countrylanguage \nWHERE countrycode IN (SELECT code FROM country WHERE headofstate = 'Beatrix') \nAND isofficial = 'T';",
      "countrylanguage.language\nFROM countrylanguage\nJOIN country ON countrylanguage.countrycode = country.code\nWHERE country.headofstate = 'Beatrix'\nAND countrylanguage.isofficial = 'T';",
      "language \nFROM countrylanguage \nWHERE countrycode = (\n    SELECT code \n    FROM country \n    WHERE headofstate = 'Beatrix'\n    ) \nAND isofficial = 'T';",
      "language \nFROM countrylanguage \nWHERE countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix' ) AND isofficial = 'T';",
      "language \nFROM countrylanguage \nWHERE countrycode = (\n    SELECT code \n    FROM country \n    WHERE headofstate = 'Beatrix'\n) AND isofficial = 'T';",
      "language\nFROM countrylanguage\nWHERE countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix')\nAND isofficial = 'T' ;\n",
      "language \nFROM countrylanguage \nWHERE countrycode = (SELECT code FROM country WHERE headofstate=\"Beatrix\") AND isofficial = \"T\";",
      "language \nFROM countrylanguage \nWHERE countrycode IN (SELECT code FROM country WHERE headofstate = 'Beatrix') \nAND isofficial = 'T';",
      "language \nFROM countrylanguage \nWHERE isofficial = 'T' \nAND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix');",
      "language \nFROM countrylanguage \nWHERE countrycode = (\n    SELECT code \n    FROM country \n    WHERE headofstate = 'Beatrix'\n) \nAND isofficial = 'T';",
      "language \nFROM countrylanguage \nWHERE isofficial = 'T' \nAND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix') \nLIMIT 1;",
      "language \nFROM countrylanguage \nWHERE isofficial = 'T' \nAND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix') LIMIT 1;",
      "language \nFROM countrylanguage \nWHERE countrycode = (\n    SELECT code \n    FROM country \n    WHERE headofstate = 'Beatrix'\n) AND isofficial = 'T';",
      "language \nFROM countrylanguage \nWHERE isofficial = 'T' \nAND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix');",
      "language \nFROM countrylanguage \nWHERE countrycode IN \n    (SELECT code FROM country WHERE headofstate = 'Beatrix') \n    AND isofficial = 'T';",
      "language FROM countrylanguage\nWHERE isofficial = 'T' AND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix');",
      "language \nFROM countrylanguage \nWHERE countrycode = (\n    SELECT code \n    FROM country \n    WHERE headofstate = 'Beatrix' \n) \nAND isofficial = 'T';"
    ],
    "prompt_tokens": 516,
    "completion_tokens": 685,
    "total_tokens": 1201
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# countrylanguage ( language(\"Dutch\", \"English\"), countrycode, isofficial, percentage )\n# country ( code, name, continent, region, code2 )\n# city ( countrycode, name, population, district, id )\n# sqlite_sequence ( name, seq )\n# city.countrycode = country.code\n# countrylanguage.countrycode = country.code\n#\n### What is the number of nations that use English and Dutch?\nSELECT",
    "output": [
      "DISTINCT countrycode\nFROM countrylanguage\nWHERE language IN ('Dutch', 'English')\nGROUP BY countrycode\nHAVING COUNT(DISTINCT language) = 2;",
      "countrycode \nFROM countrylanguage\nWHERE language IN ('English', 'Dutch') \nGROUP BY countrycode\nHAVING COUNT(DISTINCT language) = 2;",
      "count(*) FROM countrylanguage WHERE language = 'English' OR language = 'Dutch' GROUP BY countrycode HAVING count(DISTINCT language) = 2;",
      "COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('Dutch', 'English');",
      "COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('Dutch', 'English');",
      "COUNT(*) FROM countrylanguage WHERE language IN ('Dutch', 'English') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2;",
      "count(distinct countrycode) from countrylanguage where language in ('Dutch', 'English');",
      "COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('Dutch', 'English');",
      "SELECT countrycode \nFROM countrylanguage \nWHERE language in ('Dutch', 'English') \nGROUP BY countrycode \nHAVING count(DISTINCT language) = 2;",
      "DISTINCT countrycode \nFROM countrylanguage \nWHERE language IN ('English', 'Dutch') \nGROUP BY countrycode \nHAVING COUNT(DISTINCT language) = 2;",
      "(count) \nFROM countrylanguage \nWHERE language = 'Dutch' \nINTERSECT \nSELECT (count) \nFROM countrylanguage \nWHERE language = 'English';",
      "COUNT(*) FROM countrylanguage WHERE language IN ('English', 'Dutch') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2;",
      "(SELECT countrycode FROM countrylanguage WHERE language = 'English' \nINTERSECT \nSELECT countrycode FROM countrylanguage WHERE language = 'Dutch');",
      "COUNT(countrycode) \nFROM countrylanguage \nWHERE language IN ('Dutch', 'English')\nGROUP BY countrycode \nHAVING COUNT(DISTINCT language) = 2;",
      "COUNT(*) FROM countrylanguage\nWHERE language IN ('Dutch', 'English');",
      "count(distinct countrycode) \nFROM countrylanguage \nWHERE language IN ('English', 'Dutch');",
      "COUNT(DISTINCT countrycode) \nFROM countrylanguage \nWHERE language IN ('Dutch', 'English');",
      "\nSELECT countrycode \nFROM countrylanguage \nWHERE language IN ('English', 'Dutch') \nGROUP BY countrycode \nHAVING COUNT(DISTINCT language) = 2;",
      "COUNT(*) FROM countrylanguage WHERE language IN ('English', 'Dutch') AND isofficial = 'T';",
      "(SELECT count(distinct countrycode) \n FROM countrylanguage \n WHERE language = 'Dutch' \n INTERSECT \n SELECT count(distinct countrycode) \n FROM countrylanguage \n WHERE language = 'English');"
    ],
    "prompt_tokens": 513,
    "completion_tokens": 579,
    "total_tokens": 1092
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# owners ( state, owner_id, first_name, last_name, city )\n# professionals ( state, professional_id, role_code, first_name, city )\n# breeds ( breed_code, breed_name )\n# charges ( charge_type, charge_amount, charge_id )\n#\n### Which states have both owners and professionals living there?\nSELECT",
    "output": [
      "state \nFROM owners \nINTERSECT \nSELECT state \nFROM professionals;",
      "state\nFROM owners\nINTERSECT\nSELECT state\nFROM professionals;",
      "state\nFROM owners\nINTERSECT\nSELECT state\nFROM professionals;",
      "state FROM owners \nINTERSECT \nSELECT state FROM professionals;",
      "state\nFROM owners\nINTERSECT\nSELECT state\nFROM professionals;",
      "state FROM owners \nINTERSECT \nSELECT state FROM professionals;",
      "state FROM owners\nINTERSECT\nSELECT state FROM professionals;",
      "state FROM owners\nINTERSECT\nSELECT state FROM professionals;",
      "state FROM owners\nINTERSECT\nSELECT state FROM professionals;",
      "state \nFROM owners \nINTERSECT \nSELECT state \nFROM professionals;",
      "state \nFROM owners \nINTERSECT \nSELECT state \nFROM professionals;",
      "state\nFROM owners\nINTERSECT\nSELECT state\nFROM professionals;",
      "state\nFROM owners\nINTERSECT\nSELECT state\nFROM professionals;",
      "state\nFROM owners\nINTERSECT\nSELECT state\nFROM professionals;",
      "state \nFROM owners \nINTERSECT \nSELECT state \nFROM professionals;",
      "state FROM owners\nINTERSECT\nSELECT state FROM professionals;",
      "state FROM owners\nINTERSECT\nSELECT state FROM professionals;",
      "state \nFROM owners \nINTERSECT \nSELECT state \nFROM professionals;",
      "state FROM owners \nINTERSECT \nSELECT state FROM professionals;",
      "state \nFROM owners \nINTERSECT \nSELECT state \nFROM professionals;"
    ],
    "prompt_tokens": 491,
    "completion_tokens": 284,
    "total_tokens": 775
  },
  {
    "input": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_enrolment ( semester_id, degree_program_id, student_id, other_details, student_enrolment_id )\n# degree_programs ( degree_program_id, department_id, degree_summary_name, degree_summary_description )\n# semesters ( semester_id, semester_name, semester_description, other_details )\n# students ( student_id, current_address_id, first_name, permanent_address_id, middle_name )\n# student_enrolment.student_id = students.student_id\n# student_enrolment.semester_id = semesters.semester_id\n# student_enrolment.degree_program_id = degree_programs.degree_program_id\n#\n### What is the id of the semester that had both Masters and Bachelors students enrolled?\nSELECT",
    "output": [
      "semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters')\nINTERSECT \nSELECT semester_id FROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors');",
      "semester_id\nFROM student_enrolment\nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name IN ('Masters', 'Bachelors'))\nGROUP BY semester_id\nHAVING COUNT(DISTINCT degree_program_id) = 2;",
      "semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name IN ('Masters', 'Bachelors')) \nGROUP BY semester_id \nHAVING COUNT(DISTINCT degree_program_id) = 2;",
      "semesters.semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name IN ('Masters', 'Bachelors'))\nGROUP BY semester_id\nHAVING COUNT(DISTINCT degree_program_id) = 2;",
      "semester_id \nFROM student_enrolment \nWHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') \nINTERSECT \nSELECT semester_id \nFROM student_enrolment \nWHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors');",
      "semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name IN ('Masters', 'Bachelors'))\nGROUP BY semester_id\nHAVING COUNT(DISTINCT degree_program_id) = 2;",
      "semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters')\nINTERSECT \nSELECT semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors');",
      "semesters.semester_id\nFROM student_enrolment\nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters')\nINTERSECT\nSELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors');",
      "semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') \nINTERSECT \nSELECT semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors');",
      "semesters.semester_id \nFROM student_enrolment \nWHERE degree_program_id IN ('Masters', 'Bachelors') \nGROUP BY semester_id \nHAVING COUNT(DISTINCT degree_program_id) = 2;",
      "semester_id \nFROM student_enrolment \nWHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') \nINTERSECT \nSELECT semester_id \nFROM student_enrolment \nWHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors');",
      "\nsemester_id\nFROM student_enrolment\nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters')\nINTERSECT\nSELECT semester_id FROM student_enrolment\nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors');",
      "semesters.semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name IN ('Masters', 'Bachelors')) \nGROUP BY semester_id \nHAVING COUNT(DISTINCT degree_program_id) = 2;",
      "semesters.semester_id \nFROM student_enrolment \nWHERE degree_program_id = 'Masters' \nINTERSECT \nSELECT semesters.semester_id \nFROM student_enrolment \nWHERE degree_program_id = 'Bachelors';",
      "semester_id\nFROM student_enrolment\nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name='Masters')\nINTERSECT\nSELECT semester_id\nFROM student_enrolment\nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name='Bachelors');",
      "Would you like me to write the SQL query for you?",
      "semester_id\nFROM student_enrolment\nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters')\nINTERSECT\nSELECT semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors');",
      "semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id \n                            FROM degree_programs \n                            WHERE degree_summary_name IN ('Masters', 'Bachelors'))\nGROUP BY semester_id \nHAVING COUNT(DISTINCT degree_program_id) = 2;",
      "semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') \nINTERSECT \nSELECT semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors');",
      "semester_id \nFROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') \nINTERSECT \nSELECT semester_id FROM student_enrolment \nWHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors');"
    ],
    "prompt_tokens": 570,
    "completion_tokens": 1227,
    "total_tokens": 1797
  }
]